"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.messages = exports.ruleName = void 0;

var _utils = require("../../utils");

var _stylelint = require("stylelint");

var ruleName = (0, _utils.namespace)("dollar-variable-first-in-block");
exports.ruleName = ruleName;

var messages = _stylelint.utils.ruleMessages(ruleName, {
  expected: "Expected $-variable to be first in block"
});

exports.messages = messages;

function _default(primary, options) {
  return function (root, result) {
    var validOptions = _stylelint.utils.validateOptions(result, ruleName, {
      actual: primary
    }, {
      actual: options,
      possible: {
        ignore: ["comments", "imports"],
        except: ["root", "at-rule", "function", "mixin", "if-else", "loops"]
      },
      optional: true
    });

    if (!validOptions) {
      return;
    }

    var isDollarVar = function isDollarVar(node) {
      return node.prop && node.prop[0] === "$";
    };

    root.walkDecls(function (decl) {
      // Ignore declarations that aren't variables.
      // ------------------------------------------
      if (!isDollarVar(decl)) {
        return;
      } // If selected, ignore declarations in root.
      // -----------------------------------------


      if ((0, _utils.optionsHaveException)(options, "root") && decl.parent === root) {
        return;
      } // If selected, ignore declarations in different types of at-rules.
      // ----------------------------------------------------------------


      if (decl.parent.type === "atrule") {
        if ((0, _utils.optionsHaveException)(options, "at-rule") || (0, _utils.optionsHaveException)(options, "function") && decl.parent.name === "function" || (0, _utils.optionsHaveException)(options, "mixin") && decl.parent.name === "mixin" || (0, _utils.optionsHaveException)(options, "if-else") && (decl.parent.name === "if" || decl.parent.name === "else") || (0, _utils.optionsHaveException)(options, "loops") && (decl.parent.name === "each" || decl.parent.name === "for" || decl.parent.name === "while")) {
          return;
        }
      }

      var previous = decl.prev(); // If first or preceded by another variable.
      // -----------------------------------------

      if (!previous || isDollarVar(previous)) {
        return;
      } // Check if preceded only by allowed types.
      // ----------------------------------------


      var precededOnlyByAllowed = true;
      var allowComments = (0, _utils.optionsHaveIgnored)(options, "comments");
      var allowImports = (0, _utils.optionsHaveIgnored)(options, "imports");
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = decl.parent.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var sibling = _step.value;

          if (sibling === decl) {
            break;
          } else if (!isDollarVar(sibling) && !(allowComments && sibling.type === "comment" || allowImports && sibling.type === "atrule" && sibling.name === "import")) {
            precededOnlyByAllowed = false;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (precededOnlyByAllowed) {
        return;
      }

      _stylelint.utils.report({
        message: messages.expected,
        node: decl,
        result: result,
        ruleName: ruleName
      });
    });
  };
}